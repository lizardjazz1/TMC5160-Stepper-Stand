#include <Arduino.h>
#include <TMC5160.h>
#include <SPI.h>
#include "tmc.h"
#include "pins.h"
#include "config.h"
#include "api_types.h"
#include "eeprom_manager.h"

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TMC5160_SPI *motor_ptr = nullptr;  // –£–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è (extern –≤ tmc.h)
bool tmc_initialized = false;
bool motor_enabled = false;
volatile bool stallguard_triggered = false;  // –§–ª–∞–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è StallGuard

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
bool center_sequence_active = false;
unsigned long sequence_start_time = 0;
int sequence_step = 0;
const int sequence_delay = 2000;

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
void add_log(String message) {
    Serial.println(message);
}

// ===== –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò =====

bool validate_current(uint16_t current_mA) {
    if (current_mA < MIN_CURRENT_MA) {
        add_log("‚ö†Ô∏è Current too low: " + String(current_mA) + "mA (min: " + String(MIN_CURRENT_MA) + "mA)");
        return false;
    }
    if (current_mA > MAX_CURRENT_MA) {
        add_log("‚ö†Ô∏è Current too high: " + String(current_mA) + "mA (max: " + String(MAX_CURRENT_MA) + "mA)");
        return false;
    }
    return true;
}

bool validate_speed(uint32_t speed) {
    if (speed > MAX_SPEED_STEPS) {
        add_log("‚ö†Ô∏è Speed too high: " + String(speed) + " steps/s (max: " + String(MAX_SPEED_STEPS) + ")");
        return false;
    }
    return true;
}

bool validate_acceleration(uint16_t accel) {
    if (accel > MAX_ACCELERATION) {
        add_log("‚ö†Ô∏è Acceleration too high: " + String(accel) + " steps/s¬≤ (max: " + String(MAX_ACCELERATION) + ")");
        return false;
    }
    return true;
}

// ===== –†–ê–°–ß–Å–¢ –¢–û–ö–ê TMC5160 (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê!) =====

void calculate_current_settings(uint16_t current_mA, float hold_multiplier,
                                 uint8_t *out_irun, uint8_t *out_ihold, uint16_t *out_globalScaler) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º GLOBAL_SCALER = 128 (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ—Å—Ç–∞!)
    *out_globalScaler = 128;
    
    // –§–æ—Ä–º—É–ª–∞ –∏–∑ –¥–∞—Ç–∞—à–∏—Ç–∞ TMC5160 (¬ß9):
    // I_rms = (CS+1)/32 * (GLOBAL_SCALER/256) * V_fs/(R_SENSE+0.02Œ©) / sqrt(2)
    // V_fs = 0.325V (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ–ø–æ—Ä–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ)
    // R_SENSE = 0.033Œ©
    
    // –ü–µ—Ä–µ–≤–µ—Ä–Ω—ë–º —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è CS:
    // CS = (I_rms * 32 * 256 * sqrt(2) * (R_SENSE+0.02)) / (GLOBAL_SCALER * V_fs) - 1
    
    const float V_fs = 0.325;
    const float R_SENSE_TOTAL = TMC5160_RSENSE + 0.02;  // 0.033 + 0.02 = 0.053
    const float I_rms_A = current_mA / 1000.0;
    
    float CS_float = (I_rms_A * 32.0 * 256.0 * 1.41421 * R_SENSE_TOTAL) / (*out_globalScaler * V_fs) - 1.0;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º CS –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-31
    *out_irun = constrain((int)(CS_float + 0.5), 0, 31);
    
    // Hold —Ç–æ–∫ = irun * hold_multiplier
    *out_ihold = constrain((int)(*out_irun * hold_multiplier + 0.5), 0, 31);
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TMC5160 =====

bool setup_tmc5160(uint16_t current_mA, float hold_multiplier, uint16_t microsteps,
                   uint32_t max_speed, uint16_t accel, uint16_t decel) {

    Serial.println("=== TMC5160 SETUP ===");

    // 1. pinMode –¥–ª—è EN (–í–´–ö–õ–Æ–ß–ï–ù –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!)
    pinMode(EN_PIN, OUTPUT);
    digitalWrite(EN_PIN, HIGH);  // –í–´–ö–õ–Æ–ß–ï–ù (–∞–∫—Ç–∏–≤–Ω—ã–π LOW, –∑–Ω–∞—á–∏—Ç HIGH = –≤—ã–∫–ª—é—á–µ–Ω)
    Serial.println("‚úÖ EN pin configured (motor DISABLED)");

    // 2. –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú irun, ihold, globalScaler –∏–∑ current_mA
    uint8_t irun, ihold;
    uint16_t globalScaler;
    calculate_current_settings(current_mA, hold_multiplier, &irun, &ihold, &globalScaler);
    Serial.print("‚úÖ Current: ");
    Serial.print(current_mA);
    Serial.print("mA ‚Üí irun=");
    Serial.print(irun);
    Serial.print(", ihold=");
    Serial.print(ihold);
    Serial.print(", globalScaler=");
    Serial.println(globalScaler);

    // 3. PowerStageParameters (DEFAULTS!)
    TMC5160::PowerStageParameters powerStageParams;  // defaults

    // 4. MotorParameters (–ü–†–Ø–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø!)
    TMC5160::MotorParameters motorParams;
    motorParams.globalScaler = globalScaler;
    motorParams.irun = irun;
    motorParams.ihold = ihold;

    // 5. SPI.begin()
    SPI.begin();
    Serial.println("‚úÖ SPI.begin() called");

    // 6. –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ü–û–°–õ–ï SPI.begin() —Å 100kHz SPI
    if (motor_ptr == nullptr) {
        motor_ptr = new TMC5160_SPI(CS_PIN, 12000000, SPISettings(100000, MSBFIRST, SPI_MODE3), SPI);
        Serial.println("‚úÖ motor object created (SPI 100kHz)");
    }

    // 7. motor.begin()
    motor.begin(powerStageParams, motorParams, TMC5160::NORMAL_MOTOR_DIRECTION);
    Serial.println("‚úÖ motor.begin() called");

    // 8. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ú–ò–ö–†–û–®–ê–ì–ò –í–†–£–ß–ù–£–Æ! (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ tommag –Ω–µ –∏–º–µ–µ—Ç API –¥–ª—è —ç—Ç–æ–≥–æ)
    // microsteps -> mres value: 256=0, 128=1, 64=2, 32=3, 16=4, 8=5, 4=6, 2=7, 1=8
    uint8_t mres = 8; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é FULLSTEP
    if (microsteps == 256) mres = 0;
    else if (microsteps == 128) mres = 1;
    else if (microsteps == 64) mres = 2;
    else if (microsteps == 32) mres = 3;
    else if (microsteps == 16) mres = 4;
    else if (microsteps == 8) mres = 5;
    else if (microsteps == 4) mres = 6;
    else if (microsteps == 2) mres = 7;
    else if (microsteps == 1) mres = 8;
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π CHOPCONF
    uint32_t chopconf = motor.readRegister(TMC5160_Reg::CHOPCONF);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mres (–±–∏—Ç—ã 24-27)
    chopconf &= ~(0x0F << 24); // –û—á–∏—â–∞–µ–º –±–∏—Ç—ã mres
    chopconf |= (mres << 24);   // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    motor.writeRegister(TMC5160_Reg::CHOPCONF, chopconf);
    Serial.print("‚úÖ Microsteps set: ");
    Serial.print(microsteps);
    Serial.print(" (mres=");
    Serial.print(mres);
    Serial.println(")");

    // 9. ramp definition
    motor.setRampMode(TMC5160::POSITIONING_MODE);
    motor.setMaxSpeed(max_speed);
    motor.setAcceleration(accel);
    Serial.print("‚úÖ Ramp: VMAX=");
    Serial.print(max_speed);
    Serial.print(", AMAX=");
    Serial.println(accel);

    Serial.println("starting up");

    // 10. –°–ë–†–ê–°–´–í–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ –í 0!
    motor.writeRegister(TMC5160_Reg::XACTUAL, 0);
    motor.writeRegister(TMC5160_Reg::XTARGET, 0);
    Serial.println("‚úÖ Position reset to 0");

    // 11. delay(1000) –¥–ª—è –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    delay(1000);
    Serial.println("‚úÖ Calibration complete");

    tmc_initialized = true;
    return true;
}

// ===== –§–£–ù–ö–¶–ò–Ø –î–í–ò–ñ–ï–ù–ò–Ø =====

void move_motor_steps(int32_t steps, MotorControlMode mode) {
    if (!tmc_initialized) {
        add_log("‚ùå TMC5160 not initialized!");
        return;
    }

    if (!motor_enabled) {
        add_log("‚ùå Motor is disabled!");
        return;
    }

    add_log("üöÄ Moving: " + String(steps) + " steps (" + 
            String(mode == MODE_MOTION_CONTROLLER ? "SPI" : "STEP/DIR") + ")");

    if (mode == MODE_MOTION_CONTROLLER) {
        // Motion Controller Mode (–ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!)
        float current_pos = motor.getCurrentPosition();
        float target_pos = current_pos + steps;
        
        motor.setTargetPosition(target_pos);  // –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!
        add_log("‚úÖ SPI Motion: steps=" + String(steps) + ", target=" + String(target_pos));
        
    } else {
        // STEP/DIR Mode
        bool forward = (steps >= 0);
        int32_t abs_steps = abs(steps);
        digitalWrite(DIR_PIN, forward ? HIGH : LOW);
        
        // –ü–ª–∞–≤–Ω—ã–π —Ä–∞–∑–≥–æ–Ω/—Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ
        uint32_t min_delay = 160;
        uint32_t max_delay = 1000;
        uint32_t accel_steps = 200;
        uint32_t decel_steps = 200;
        
        for (int32_t i = 0; i < abs_steps; i++) {
            uint32_t delay_us;
            if (i < accel_steps) {
                delay_us = max_delay - ((max_delay - min_delay) * i / accel_steps);
            } else if (i > abs_steps - decel_steps) {
                int32_t decel_i = abs_steps - i;
                delay_us = max_delay - ((max_delay - min_delay) * decel_i / decel_steps);
            } else {
                delay_us = min_delay;
            }
            
            digitalWrite(STEP_PIN, HIGH);
            delayMicroseconds(delay_us);
            digitalWrite(STEP_PIN, LOW);
            delayMicroseconds(delay_us);
        }
        add_log("‚úÖ Completed: " + String(abs_steps) + " steps");
    }
}

// ===== ENABLE/DISABLE =====

void enable_motor() {
    if (!tmc_initialized) {
        add_log("‚ùå TMC5160 not initialized!");
        return;
    }

    motor.enable();  // –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!
    digitalWrite(EN_PIN, LOW);  // –ê–∫—Ç–∏–≤–Ω—ã–π LOW
    motor_enabled = true;
    add_log("‚úÖ Motor enabled");
}

void disable_motor() {
    if (!tmc_initialized) return;

    motor.disable();  // –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!
    digitalWrite(EN_PIN, HIGH);
    motor_enabled = false;
    add_log("‚ùå Motor disabled");
}

// ===== LOOP FUNCTIONS =====

void run_motor() {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ STEP/DIR —Ä–µ–∂–∏–º–µ
}

void test_step_dir_mode() {
    if (!tmc_initialized || !motor_enabled) {
        add_log("‚ùå TMC5160 not ready for test!");
        return;
    }
    
    add_log("üß™ Testing STEP/DIR mode...");
    
    // –¢–µ—Å—Ç –≤–ø–µ—Ä—ë–¥
    add_log("üß™ Test: 100 steps FORWARD");
    digitalWrite(DIR_PIN, HIGH);
    delay(10);
    
    for (int i = 0; i < 100; i++) {
        digitalWrite(STEP_PIN, HIGH);
        delayMicroseconds(160);
        digitalWrite(STEP_PIN, LOW);
        delayMicroseconds(160);
    }
    
    add_log("‚úÖ Forward test complete");
    delay(1000);
    
    // –¢–µ—Å—Ç –Ω–∞–∑–∞–¥
    add_log("üß™ Test: 100 steps BACKWARD");
    digitalWrite(DIR_PIN, LOW);
    delay(10);
    
    for (int i = 0; i < 100; i++) {
        digitalWrite(STEP_PIN, HIGH);
        delayMicroseconds(160);
        digitalWrite(STEP_PIN, LOW);
        delayMicroseconds(160);
    }
    
    add_log("‚úÖ Backward test complete");
    add_log("‚úÖ STEP/DIR mode test passed!");
}

// ===== CENTER SEQUENCE =====

void update_center_sequence() {
    if (!center_sequence_active) return;
    
    unsigned long current_time = millis();
    MotorControlMode mode = (MotorControlMode)currentSettings.control_mode;
    
    switch (sequence_step) {
        case 0:
            if (current_time - sequence_start_time >= sequence_delay) {
                move_motor_steps(1000, mode);
                sequence_step = 1;
                sequence_start_time = current_time;
                add_log("üéØ Center sequence: Step 1 - Right");
            }
            break;
            
        case 1:
            if (current_time - sequence_start_time >= sequence_delay) {
                move_motor_steps(-1000, mode);
                sequence_step = 2;
                sequence_start_time = current_time;
                add_log("üéØ Center sequence: Step 2 - Left");
            }
            break;
            
        case 2:
            if (current_time - sequence_start_time >= sequence_delay) {
                move_motor_steps(1000, mode);
                sequence_step = 3;
                sequence_start_time = current_time;
                add_log("üéØ Center sequence: Step 3 - Return to center");
            }
            break;
            
        case 3:
            if (current_time - sequence_start_time >= sequence_delay) {
                center_sequence_active = false;
                add_log("‚úÖ Center sequence completed");
            }
            break;
    }
}

bool position_reached() {
    if (!tmc_initialized) return true;
    if (!motor_enabled) return true;  // –ï—Å–ª–∏ –º–æ—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û —Å–∫–æ—Ä–æ—Å—Ç—å (–Ω–µ –ø–æ–∑–∏—Ü–∏—é, —Ç.–∫. –ø–æ—Å–ª–µ stop() target –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è)
    int32_t vactual = motor.getCurrentSpeed();
    
    // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å = 0, –∑–Ω–∞—á–∏—Ç –ù–ï –¥–≤–∏–∂–µ—Ç—Å—è
    return (abs(vactual) < 1);
}

void start_center_sequence() {
    if (!tmc_initialized || !motor_enabled) {
        add_log("‚ùå Cannot start center sequence - motor not ready");
        return;
    }
    
    center_sequence_active = true;
    sequence_step = 0;
    sequence_start_time = millis();
    add_log("üéØ Center sequence started");
}

void stop_center_sequence() {
    center_sequence_active = false;
    add_log("üõë Center sequence stopped");
}

// ===== STATUS FUNCTIONS =====

String get_movement_status() {
    if (!tmc_initialized) return "Not initialized";
    
    if (position_reached()) {
        return "At target";
    } else {
        return "Moving";
    }
}

int32_t get_current_speed() {
    if (!tmc_initialized) return 0;
    return (int32_t)motor.getCurrentSpeed();  // –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!
}

uint32_t get_driver_status() {
    if (!tmc_initialized) return 0;
    return motor.readRegister(TMC5160_Reg::DRV_STATUS);
}

String get_detailed_diagnostics() {
    if (!tmc_initialized) {
        return "TMC5160 not initialized";
    }

    String diag = "=== TMC5160 DETAILED DIAGNOSTICS ===\n\n";

    // 1. GSTAT –∞–Ω–∞–ª–∏–∑ (–∫–∞–∫ –≤ Config Wizard)
    TMC5160_Reg::GSTAT_Register gstat = {0};
    gstat.value = motor.readRegister(TMC5160_Reg::GSTAT);
    
    diag += "GSTAT: 0x" + String(gstat.value, HEX) + " - ";
    if (gstat.uv_cp) {
        diag += "‚ö†Ô∏è Charge pump undervoltage!\n";
    } else if (gstat.drv_err) {
        diag += "‚ùå Driver error detected!\n";
    } else {
        diag += "‚úÖ No errors\n";
    }
    diag += "\n";

    // 2. DRV_STATUS –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∫–∞–∫ –≤ Config Wizard)
    TMC5160_Reg::DRV_STATUS_Register drvStatus = {0};
    drvStatus.value = motor.readRegister(TMC5160_Reg::DRV_STATUS);
    
    diag += "DRV_STATUS: 0x" + String(drvStatus.value, HEX) + "\n";
    if (drvStatus.s2vsa) diag += "  ‚ùå Short to supply phase A\n";
    if (drvStatus.s2vsb) diag += "  ‚ùå Short to supply phase B\n";
    if (drvStatus.s2ga) diag += "  ‚ùå Short to ground phase A\n";
    if (drvStatus.s2gb) diag += "  ‚ùå Short to ground phase B\n";
    if (drvStatus.ot) diag += "  ‚ö†Ô∏è Overtemperature warning\n";
    if (drvStatus.otpw) diag += "  ‚ö†Ô∏è Overtemperature pre-warning\n";
    if (drvStatus.stst) diag += "  ‚úÖ Standstill detected\n";
    if (!drvStatus.s2vsa && !drvStatus.s2vsb && !drvStatus.s2ga && !drvStatus.s2gb && !drvStatus.ot) {
        diag += "  ‚úÖ No error conditions\n";
    }
    diag += "\n";

    // 3. IOIN (–≤–µ—Ä—Å–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞)
    uint32_t ioin = motor.readRegister(TMC5160_Reg::IO_INPUT_OUTPUT);
    uint8_t version = (ioin >> 24) & 0xFF;
    diag += "IC Version: 0x" + String(version, HEX);
    diag += (version == 0x30) ? " (TMC5160)\n" : " (Unknown)\n";
    diag += "\n";

    // 4. –ü–æ–∑–∏—Ü–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
    diag += "Position: " + String(motor.getCurrentPosition()) + " steps\n";
    diag += "Target: " + String(motor.getTargetPosition()) + " steps\n";
    diag += "Speed: " + String(motor.getCurrentSpeed()) + " steps/s\n";
    diag += "\n";

    // 5. –¢–æ–∫
    uint32_t ihold_irun = motor.readRegister(TMC5160_Reg::IHOLD_IRUN);
    uint8_t irun = (ihold_irun >> 8) & 0x1F;
    uint8_t ihold = (ihold_irun >> 0) & 0x1F;
    uint32_t globalScaler = motor.readRegister(TMC5160_Reg::GLOBAL_SCALER);
    diag += "IRUN: " + String(irun) + ", IHOLD: " + String(ihold) + ", GLOBAL_SCALER: " + String(globalScaler) + "\n";
    diag += "Current (RMS): " + String(get_motor_current()) + " mA\n";

    return diag;
}

// ===== CURRENT CONTROL =====

void set_motor_current(uint16_t current_mA, float hold_multiplier) {
    if (!tmc_initialized) {
        add_log("‚ùå TMC5160 not initialized!");
        return;
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º irun/ihold
    uint8_t irun, ihold;
    uint16_t globalScaler;
    calculate_current_settings(current_mA, hold_multiplier, &irun, &ihold, &globalScaler);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã
    motor.writeRegister(TMC5160_Reg::GLOBAL_SCALER, globalScaler);
    
    uint32_t ihold_irun = (ihold << 0) | (irun << 8) | (7 << 16);  // iholddelay=7
    motor.writeRegister(TMC5160_Reg::IHOLD_IRUN, ihold_irun);

    add_log("üîß Current updated: " + String(current_mA) + "mA (irun=" + String(irun) + ", ihold=" + String(ihold) + ")");
}

uint16_t get_motor_current() {
    if (!tmc_initialized) return 0;
    
    uint32_t ihold_irun = motor.readRegister(TMC5160_Reg::IHOLD_IRUN);
    uint8_t irun = (ihold_irun >> 8) & 0x1F;
    uint32_t globalScaler = motor.readRegister(TMC5160_Reg::GLOBAL_SCALER);
    
    // –û–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç
    const float V_fs = 0.325;
    const float R_SENSE_TOTAL = TMC5160_RSENSE + 0.02;
    
    float I_rms_A = ((irun + 1.0) / 32.0) * (globalScaler / 256.0) * (V_fs / R_SENSE_TOTAL) / 1.41421;
    uint16_t current_mA = (uint16_t)(I_rms_A * 1000.0);
    
    return current_mA;
}

String get_current_diagnostics() {
    if (!tmc_initialized) {
        return "TMC5160 not initialized";
    }

    String diag = "=== CURRENT DIAGNOSTICS ===\n";
    
    uint32_t ihold_irun = motor.readRegister(TMC5160_Reg::IHOLD_IRUN);
    uint8_t irun = (ihold_irun >> 8) & 0x1F;
    uint8_t ihold = (ihold_irun >> 0) & 0x1F;
    uint32_t globalScaler = motor.readRegister(TMC5160_Reg::GLOBAL_SCALER);
    
    diag += "IRUN: " + String(irun) + " (0-31)\n";
    diag += "IHOLD: " + String(ihold) + " (0-31)\n";
    diag += "GLOBAL_SCALER: " + String(globalScaler) + "\n";
    diag += "R_SENSE: " + String(TMC5160_RSENSE, 3) + " Œ©\n";
    diag += "Calculated I_RMS: " + String(get_motor_current()) + " mA\n";

    return diag;
}

// ============================================================================
// STALLGUARD –§–£–ù–ö–¶–ò–ò
// ============================================================================

// –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ StallGuard
void IRAM_ATTR stallguard_isr() {
    stallguard_triggered = true;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ StallGuard
void setup_stallguard(int8_t threshold) {
    if (!tmc_initialized) {
        add_log("‚ùå Cannot setup StallGuard - TMC not initialized");
        return;
    }
    
    if (threshold == 0) {
        // –í—ã–∫–ª—é—á–∞–µ–º StallGuard
        detachInterrupt(digitalPinToInterrupt(DIAG_PIN));
        add_log("üîá StallGuard disabled");
        return;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DIAG –ø–∏–Ω –∫–∞–∫ –≤—Ö–æ–¥ —Å –ø–æ–¥—Ç—è–∂–∫–æ–π –≤–Ω–∏–∑
    pinMode(DIAG_PIN, INPUT_PULLDOWN);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º StallGuard —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä—ã
    // COOLCONF: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ StallGuard
    uint32_t coolconf = motor.readRegister(TMC5160_Reg::COOLCONF);
    coolconf &= ~(0x7F << 16);  // –û—á–∏—â–∞–µ–º –±–∏—Ç—ã SGT (StallGuard Threshold)
    coolconf |= ((threshold & 0x7F) << 16);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ (-64...63)
    motor.writeRegister(TMC5160_Reg::COOLCONF, coolconf);
    
    // TCOOLTHRS: –ø–æ—Ä–æ–≥ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è StallGuard (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã—à–µ —ç—Ç–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)
    motor.writeRegister(TMC5160_Reg::TCOOLTHRS, 0xFFFFF);  // –í—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ DIAG –ø–∏–Ω
    attachInterrupt(digitalPinToInterrupt(DIAG_PIN), stallguard_isr, RISING);
    
    add_log("‚úÖ StallGuard enabled, threshold: " + String(threshold));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ StallGuard
bool is_stallguard_triggered() {
    if (stallguard_triggered) {
        stallguard_triggered = false;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        return true;
    }
    return false;
}
