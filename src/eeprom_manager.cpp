#include "eeprom_manager.h"
#include "tmc.h"

MotorSettings currentSettings;

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è checksum
uint32_t calculateChecksum(const MotorSettings& settings) {
    uint32_t sum = 0;
    sum += settings.current_mA;
    sum += settings.microsteps;
    sum += settings.max_speed;
    sum += settings.acceleration;
    sum += settings.deceleration;
    sum += settings.steps_per_rev;
    sum += (uint32_t)(settings.hold_multiplier * 1000); // float -> int –¥–ª—è checksum
    sum += settings.control_mode;
    return sum;
}

bool saveMotorSettings(const MotorSettings& settings) {
    // –í—ã—á–∏—Å–ª—è–µ–º checksum
    MotorSettings settingsToSave = settings;
    settingsToSave.checksum = calculateChecksum(settings);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM
    EEPROM.put(EEPROM_SETTINGS_ADDR, settingsToSave);
    EEPROM.commit();

    add_log("üíæ Motor settings saved to EEPROM");

    return true;
}

bool loadMotorSettings(MotorSettings& settings) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ EEPROM
    EEPROM.get(EEPROM_SETTINGS_ADDR, settings);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º checksum
    uint32_t expectedChecksum = calculateChecksum(settings);

    if (settings.checksum != expectedChecksum) {
        add_log("‚ö†Ô∏è Invalid EEPROM checksum, using defaults");
        return false;
    }

    add_log("üìö Motor settings loaded from EEPROM");

    return true;
}

void initMotorSettingsFromEEPROM() {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ EEPROM
    if (!loadMotorSettings(currentSettings)) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        currentSettings.current_mA = 800;              // 800mA (NEMA17)
        currentSettings.hold_multiplier = 0.5f;        // 50% hold
        currentSettings.microsteps = DEFAULT_MICROSTEPS;
        currentSettings.max_speed = 400;               // –ö–∞–∫ –≤ —Ç–µ—Å—Ç–µ!
        currentSettings.acceleration = 500;            // –ö–∞–∫ –≤ —Ç–µ—Å—Ç–µ!
        currentSettings.deceleration = DEFAULT_DECEL;
        currentSettings.steps_per_rev = 200;           // –ë–ï–ó –º–∏–∫—Ä–æ—à–∞–≥–æ–≤! (–¥—Ä–∞–π–≤–µ—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        currentSettings.control_mode = DEFAULT_CONTROL_MODE;
        currentSettings.gear_ratio = 1.0f;             // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1:1 (–ø—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞)
        currentSettings.stallguard_threshold = 0;      // StallGuard –≤—ã–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        saveMotorSettings(currentSettings);
        add_log("üîÑ Using default motor settings (NEMA17 800mA)");
    }

    printMotorSettings();
}

void printMotorSettings() {
    add_log("‚öôÔ∏è Current motor settings:");
    add_log("  Current: " + String(currentSettings.current_mA) + " mA");
    add_log("  Hold multiplier: " + String(currentSettings.hold_multiplier, 2));
    add_log("  Microsteps: " + String(currentSettings.microsteps));
    add_log("  Steps per rev: " + String(currentSettings.steps_per_rev));
    add_log("  Max speed: " + String(currentSettings.max_speed) + " steps/s");
    add_log("  Acceleration: " + String(currentSettings.acceleration) + " steps/s¬≤");
    add_log("  Deceleration: " + String(currentSettings.deceleration) + " steps/s¬≤");
    add_log("  Control mode: " + String(currentSettings.control_mode == MODE_MOTION_CONTROLLER ? "Motion Controller" : "STEP/DIR"));
}
