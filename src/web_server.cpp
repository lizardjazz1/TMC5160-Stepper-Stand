#include <Arduino.h>
#include <ESPAsyncWebServer.h>
#include <LittleFS.h>
#include <ArduinoJson.h>
#include "web_server.h"
#include "tmc.h"
#include "eeprom_manager.h"
#include "api_types.h"
#include "pins.h"

AsyncWebServer server(80);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
String system_logs = "";

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–æ–≥ (–æ–±—ä—è–≤–ª–µ–Ω–∞ –≤ tmc.h)
void add_log_to_web(String message) {
    system_logs += "[" + String(millis()) + "] " + message + "\n";
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –∞ –Ω–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º)
    if (system_logs.length() > 10000) {
        int cutPos = system_logs.indexOf('\n', 5000);
        if (cutPos != -1) {
            system_logs = system_logs.substring(cutPos + 1);
        } else {
            system_logs = system_logs.substring(5000);
        }
    }
}

// JSON –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
String getStatusJson() {
    JsonDocument doc;
    doc["success"] = true;
    
    JsonObject data = doc["data"].to<JsonObject>();
    data["initialized"] = tmc_initialized;
    data["enabled"] = motor_enabled;
    // –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã –ù–ê–ü–†–Ø–ú–£–Æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–æ–Ω–∏ –í –ú–ò–ö–†–û–®–ê–ì–ê–•!)
    int32_t xactual_microsteps = tmc_initialized ? (int32_t)motor.readRegister(TMC5160_Reg::XACTUAL) : 0;
    int32_t xtarget_microsteps = tmc_initialized ? (int32_t)motor.readRegister(TMC5160_Reg::XTARGET) : 0;
    int32_t vactual = tmc_initialized ? (int32_t)motor.readRegister(TMC5160_Reg::VACTUAL) : 0;
    
    // –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –ú–ò–ö–†–û–®–ê–ì–ò ‚Üí –ë–ê–ó–û–í–´–ï –®–ê–ì–ò (–¥–µ–ª–∏–º –Ω–∞ microsteps)
    uint16_t microsteps = currentSettings.microsteps > 0 ? currentSettings.microsteps : 16;
    int32_t xactual = xactual_microsteps / microsteps;
    int32_t xtarget = xtarget_microsteps / microsteps;
    int32_t steps_remaining = abs(xtarget_microsteps - xactual_microsteps) / microsteps;
    
    data["current_position"] = xactual;
    data["target_position"] = xtarget;
    data["current_speed"] = vactual;
    data["steps_remaining"] = steps_remaining;
    data["is_moving"] = tmc_initialized ? !position_reached() : false;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è frontend (–∏–∑ currentSettings)
    JsonObject settings = data["settings"].to<JsonObject>();
    settings["steps_per_rev"] = currentSettings.steps_per_rev;
    settings["max_speed"] = currentSettings.max_speed;
    settings["acceleration"] = currentSettings.acceleration;
    settings["deceleration"] = currentSettings.deceleration;
    settings["current_mA"] = currentSettings.current_mA;
    settings["hold_multiplier"] = currentSettings.hold_multiplier;
    settings["microsteps"] = currentSettings.microsteps;
    settings["gear_ratio"] = currentSettings.gear_ratio;  // –ü–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ!
    settings["stealthchop"] = false;  // –í—Å–µ–≥–¥–∞ SpreadCycle –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞
    
    String response;
    serializeJson(doc, response);
    return response;
}

// JSON –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
String getDiagnosticJson() {
    JsonDocument doc;
    doc["success"] = true;
    
    JsonObject data = doc["data"].to<JsonObject>();
    data["initialized"] = tmc_initialized;
    
    if (tmc_initialized) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º
        uint32_t ioin_value = motor.readRegister(TMC5160_Reg::IO_INPUT_OUTPUT);
        uint8_t version = (ioin_value >> 24) & 0xFF;
        bool communication_ok = (version != 0xFF && version != 0 && 
                                ioin_value != 0xFFFFFFFF && ioin_value != 0x00000000);
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        data["chip_version"] = communication_ok ? String(version) : "N/A";
        data["current_position"] = communication_ok ? (int32_t)motor.readRegister(TMC5160_Reg::XACTUAL) : 0;
        data["target_position"] = communication_ok ? (int32_t)motor.readRegister(TMC5160_Reg::XTARGET) : 0;
        data["spi_communication"] = communication_ok;
        data["motor_enabled"] = motor_enabled;
        data["microsteps"] = communication_ok ? currentSettings.microsteps : 0;
        data["current_mA"] = communication_ok ? currentSettings.current_mA : 0;
        
        // –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
        JsonObject analysis = data["analysis"].to<JsonObject>();
        analysis["chip_version"] = communication_ok ? String(version) : String("0");
        bool drv_enn = (ioin_value >> 1) & 0x01;
        analysis["driver_enabled"] = !drv_enn; // drv_enn = 0 –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω
        analysis["vs_power_ok"] = true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–∏—Ç–∞–Ω–∏–µ OK
        
        // –†–µ–≥–∏—Å—Ç—Ä—ã (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
        JsonObject registers = data["registers"].to<JsonObject>();
        if (communication_ok) {
            registers["ioin"] = "0x" + String(motor.readRegister(TMC5160_Reg::IO_INPUT_OUTPUT), HEX);
            registers["gconf"] = "0x" + String(motor.readRegister(TMC5160_Reg::GCONF), HEX);
            registers["gstat"] = "0x" + String(motor.readRegister(TMC5160_Reg::GSTAT), HEX);
            registers["xactual"] = String((int32_t)motor.readRegister(TMC5160_Reg::XACTUAL));
            registers["xtarget"] = String((int32_t)motor.readRegister(TMC5160_Reg::XTARGET));
            registers["vmax"] = String(motor.readRegister(TMC5160_Reg::VMAX));
            registers["amax"] = String(motor.readRegister(TMC5160_Reg::AMAX));
            registers["dmax"] = String(motor.readRegister(TMC5160_Reg::DMAX));
        } else {
            registers["ioin"] = "N/A";
            registers["gconf"] = "N/A";
            registers["gstat"] = "N/A";
            registers["xactual"] = "N/A";
            registers["xtarget"] = "N/A";
            registers["vmax"] = "N/A";
            registers["amax"] = "N/A";
            registers["dmax"] = "N/A";
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        data["vmax"] = communication_ok ? motor.readRegister(TMC5160_Reg::VMAX) : 0;
        data["amax"] = communication_ok ? motor.readRegister(TMC5160_Reg::AMAX) : 0;
        data["dmax"] = communication_ok ? motor.readRegister(TMC5160_Reg::DMAX) : 0;
        data["vactual"] = communication_ok ? (int32_t)motor.getCurrentSpeed() : 0;
        
        // –°—Ç–∞—Ç—É—Å –¥—Ä–∞–π–≤–µ—Ä–∞
        uint32_t gstat = communication_ok ? motor.readRegister(TMC5160_Reg::GSTAT) : 0;
        data["gstat"] = "0x" + String(gstat, HEX);
        data["gstat_reset"] = (gstat & 0x01) ? true : false;
        data["gstat_driver_error"] = (gstat & 0x02) ? true : false;
        
        // –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–µ–Ω–∏—è
        uint32_t ramp_stat = communication_ok ? motor.readRegister(TMC5160_Reg::RAMP_STAT) : 0;
        data["ramp_stat"] = "0x" + String(ramp_stat, HEX);
        data["position_reached"] = (ramp_stat & 0x80) ? true : false;
        data["velocity_reached"] = (ramp_stat & 0x40) ? true : false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        uint32_t chopconf = communication_ok ? motor.readRegister(TMC5160_Reg::CHOPCONF) : 0;
        data["toff"] = communication_ok ? (chopconf & 0x0F) : 0;
        data["intpol"] = communication_ok ? ((chopconf >> 28) & 0x01) : false;
        uint32_t gconf = communication_ok ? motor.readRegister(TMC5160_Reg::GCONF) : 0;
        data["en_pwm_mode"] = communication_ok ? (gconf & 0x04) : false;
        uint32_t pwmconf = communication_ok ? motor.readRegister(TMC5160_Reg::PWMCONF) : 0;
        data["pwm_autoscale"] = communication_ok ? ((pwmconf >> 18) & 0x01) : false;
        
               // SPI –º–µ—Ç–æ–¥ –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
               data["spi_method"] = communication_ok ? "SPI Mode 3" : "N/A";
               uint32_t rampmode = communication_ok ? motor.readRegister(TMC5160_Reg::RAMPMODE) : 0;
               data["ramp_mode"] = rampmode;
               data["mode_description"] = communication_ok ? 
                   (rampmode == 0 ? "Motion Controller Mode" : "STEP/DIR Mode") : "N/A";
        
        // –†–∞—Å–ø–∏–Ω–æ–≤–∫–∞ (–∏–∑ pins.h)
        JsonObject pins = data["pins"].to<JsonObject>();
        pins["cs"] = CS_PIN;
        pins["mosi"] = MOSI_PIN;
        pins["miso"] = MISO_PIN;
        pins["sck"] = SCK_PIN;
        pins["en"] = EN_PIN;
        pins["step"] = STEP_PIN;
        pins["dir"] = DIR_PIN;
        
    } else {
        data["spi_communication"] = false;
        data["spi_method"] = "N/A";
        data["error"] = "TMC5160 not initialized";
        
        // –ü—É—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        data["analysis"] = JsonObject();
        data["registers"] = JsonObject();
        data["pins"] = JsonObject();
    }
    
    String response;
    serializeJson(doc, response);
    return response;
}

void init_web_server() {
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
        request->send(LittleFS, "/index.html", "text/html");
    });

    // API: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    server.on("/api/status", HTTP_GET, [](AsyncWebServerRequest *request) {
        request->send(200, "application/json", getStatusJson());
    });

    // API: –í–∫–ª—é—á–∏—Ç—å –º–æ—Ç–æ—Ä
    server.on("/api/enable", HTTP_POST, [](AsyncWebServerRequest *request) {
        enable_motor();
        add_log("üîã Motor enabled via API");
        add_log_to_web("üîã Motor enabled via API");
        
        JsonDocument doc;
        doc["success"] = true;
        doc["message"] = "Motor enabled";
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –í—ã–∫–ª—é—á–∏—Ç—å –º–æ—Ç–æ—Ä
    server.on("/api/disable", HTTP_POST, [](AsyncWebServerRequest *request) {
        disable_motor();
        add_log("üîå Motor disabled via API");
        add_log_to_web("üîå Motor disabled via API");
        
        JsonDocument doc;
        doc["success"] = true;
        doc["message"] = "Motor disabled";
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞)
    server.on("/api/move", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (request->hasParam("steps", true)) {
            int32_t steps = request->getParam("steps", true)->value().toInt();

            // –°—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            uint16_t driver_current = request->hasParam("driver_current", true) ?
                request->getParam("driver_current", true)->value().toInt() : currentSettings.current_mA;
            float hold_mult = request->hasParam("hold_multiplier", true) ?
                request->getParam("hold_multiplier", true)->value().toFloat() : currentSettings.hold_multiplier;
            uint16_t microsteps = request->hasParam("driver_microsteps", true) ?
                request->getParam("driver_microsteps", true)->value().toInt() : currentSettings.microsteps;
            uint32_t max_speed = request->hasParam("max_speed", true) ?
                request->getParam("max_speed", true)->value().toInt() : currentSettings.max_speed;
            uint16_t acceleration = request->hasParam("acceleration", true) ?
                request->getParam("acceleration", true)->value().toInt() : currentSettings.acceleration;
            uint16_t deceleration = request->hasParam("deceleration", true) ?
                request->getParam("deceleration", true)->value().toInt() : currentSettings.deceleration;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (!validate_current(driver_current)) {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "Invalid current value: " + String(driver_current) + "mA";
                String response; serializeJson(doc, response);
                request->send(400, "application/json", response);
                return;
            }
            if (!validate_speed(max_speed)) {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "Invalid speed value: " + String(max_speed) + " steps/s";
                String response; serializeJson(doc, response);
                request->send(400, "application/json", response);
                return;
            }
            if (!validate_acceleration(acceleration) || !validate_acceleration(deceleration)) {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "Invalid acceleration/deceleration values";
                String response; serializeJson(doc, response);
                request->send(400, "application/json", response);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ TMC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!tmc_initialized) {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "TMC5160 not initialized";
                String response; serializeJson(doc, response);
                request->send(500, "application/json", response);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω
            if (!motor_enabled) {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "Motor is not enabled. Please enable motor first.";
                String response; serializeJson(doc, response);
                request->send(400, "application/json", response);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å/—É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (–ë–ï–ó –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!)
            motor.setMaxSpeed(max_speed);
            motor.setAcceleration(acceleration);
            add_log("‚öôÔ∏è Speed/Accel updated: VMAX=" + String(max_speed) + ", AMAX=" + String(acceleration));

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º –∏–∑ currentSettings
            MotorControlMode mode = (MotorControlMode)currentSettings.control_mode;
            move_motor_steps(steps, mode);
            
            add_log("üöÄ Movement: " + String(steps) + " steps in " + 
                    String(mode == MODE_MOTION_CONTROLLER ? "Motion Controller" : "STEP/DIR") + " mode");
            add_log_to_web("üöÄ Movement started: " + String(steps) + " steps");

            JsonDocument doc;
            doc["success"] = true;
            doc["message"] = "Movement started: " + String(steps) + " steps in " + 
                              String(mode == MODE_MOTION_CONTROLLER ? "Motion Controller" : "STEP/DIR") + " mode";

            String response;
            serializeJson(doc, response);
            request->send(200, "application/json", response);
        } else {
            JsonDocument doc;
            doc["success"] = false;
            doc["message"] = "Missing steps parameter";

            String response;
            serializeJson(doc, response);
            request->send(400, "application/json", response);
        }
    });

    // API: –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —É–≥–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º)
    server.on("/api/move_angle", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (request->hasParam("angle", true) && request->hasParam("direction", true)) {
            float angle = request->getParam("angle", true)->value().toFloat();
            String direction = request->getParam("direction", true)->value();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º steps_per_rev –∏–∑ currentSettings
            int32_t steps = (angle / 360.0) * currentSettings.steps_per_rev;

            add_log("üìä Angle: " + String(angle) + "¬∞");
            add_log("üìä Steps per rev: " + String(currentSettings.steps_per_rev));
            add_log("üìä Calculated steps: " + String(steps));

            if (direction == "backward") steps = -steps;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
            MotorControlMode mode = (MotorControlMode)currentSettings.control_mode;
            move_motor_steps(steps, mode);
            
            add_log("üîÑ Angle movement: " + String(angle) + "¬∞ " + direction + " (" + String(steps) + " steps)");
            add_log_to_web("üîÑ Angle movement: " + String(angle) + "¬∞ " + direction);

            JsonDocument doc;
            doc["success"] = true;
            doc["message"] = "Angle movement started: " + String(angle) + "¬∞ " + direction;
            doc["steps"] = steps;

            String response;
            serializeJson(doc, response);
            request->send(200, "application/json", response);
        } else {
            JsonDocument doc;
            doc["success"] = false;
            doc["message"] = "Missing angle or direction parameter";

            String response;
            serializeJson(doc, response);
            request->send(400, "application/json", response);
        }
    });

    // API: –î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    server.on("/api/move_from_center", HTTP_POST, [](AsyncWebServerRequest *request) {
        start_center_sequence(); // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!
        add_log("üéØ Center sequence initiated");
        add_log_to_web("üéØ Center sequence initiated");
        
        JsonDocument doc;
        doc["success"] = true;
        doc["message"] = "Center cycle initiated";
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    server.on("/api/emergency_stop", HTTP_POST, [](AsyncWebServerRequest *request) {
        digitalWrite(EN_PIN, HIGH);
        motor_enabled = false;
        
        if (tmc_initialized) {
            motor.stop();  // –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!
        }
        
        add_log("üö® EMERGENCY STOP activated!");
        add_log_to_web("üö® EMERGENCY STOP activated!");
        
        JsonDocument doc;
        doc["success"] = true;
        doc["message"] = "Emergency stop activated";
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
    server.on("/api/apply_preset", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (request->hasParam("preset_id", true)) {
            int preset_id = request->getParam("preset_id", true)->value().toInt();
            
            if (preset_id >= 0 && preset_id < NEMA_PRESETS_COUNT) {
                const MotorPreset& preset = NEMA_PRESETS[preset_id];
                
                bool success = setup_tmc5160(
                    preset.current_mA,
                    preset.hold_mult,
                    preset.microsteps,
                    preset.max_speed,
                    preset.acceleration,
                    preset.deceleration
                );
                
                if (success) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ EEPROM –∏ currentSettings
                    MotorSettings newSettings;
                    newSettings.current_mA = preset.current_mA;
                    newSettings.hold_multiplier = preset.hold_mult;  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!
                    newSettings.microsteps = preset.microsteps;
                    newSettings.max_speed = preset.max_speed;
                    newSettings.acceleration = preset.acceleration;
                    newSettings.deceleration = preset.deceleration;
                    newSettings.steps_per_rev = preset.steps_per_rev;
                    newSettings.control_mode = MODE_MOTION_CONTROLLER;
                    
                    if (saveMotorSettings(newSettings)) {
                        currentSettings = newSettings;
                        add_log("üíæ Preset settings saved to EEPROM");
                        add_log_to_web("üíæ Preset settings saved to EEPROM");
                    }
                    
                    add_log("‚öôÔ∏è Preset applied: " + String(preset.name));
                    add_log_to_web("‚öôÔ∏è Preset applied: " + String(preset.name));
                    
                    JsonDocument doc;
                    doc["success"] = true;
                    doc["message"] = "Preset " + String(preset.name) + " applied and saved";
                    
                    JsonObject data = doc["data"].to<JsonObject>();
                    data["name"] = preset.name;
                    data["current_mA"] = preset.current_mA;
                    data["hold_mult"] = preset.hold_mult;
                    data["microsteps"] = preset.microsteps;
                    data["max_speed"] = preset.max_speed;
                    data["acceleration"] = preset.acceleration;
                    data["deceleration"] = preset.deceleration;
                    data["steps_per_rev"] = preset.steps_per_rev;
                    
                    String response;
                    serializeJson(doc, response);
                    request->send(200, "application/json", response);
                } else {
                    JsonDocument doc;
                    doc["success"] = false;
                    doc["message"] = "Failed to apply preset";
                    
                    String response;
                    serializeJson(doc, response);
                    request->send(500, "application/json", response);
                }
            } else {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "Invalid preset ID";
                
                String response;
                serializeJson(doc, response);
                request->send(400, "application/json", response);
            }
        } else {
            JsonDocument doc;
            doc["success"] = false;
            doc["message"] = "Missing preset_id parameter";
            
            String response;
            serializeJson(doc, response);
            request->send(400, "application/json", response);
        }
    });

    // API: –°–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ (–¥–ª—è UI)
    server.on("/api/presets", HTTP_GET, [](AsyncWebServerRequest *request) {
        JsonDocument doc;
        doc["success"] = true;
        JsonArray arr = doc["data"].to<JsonArray>();
        for (int i = 0; i < NEMA_PRESETS_COUNT; i++) {
            const MotorPreset& p = NEMA_PRESETS[i];
            JsonObject o = arr.add<JsonObject>();
            o["id"] = i;
            o["name"] = p.name;
            o["current_mA"] = p.current_mA;
            o["hold_mult"] = p.hold_mult;
            o["microsteps"] = p.microsteps;
            o["max_speed"] = p.max_speed;
            o["acceleration"] = p.acceleration;
            o["deceleration"] = p.deceleration;
        }
        String response; serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    server.on("/api/diagnostic", HTTP_GET, [](AsyncWebServerRequest *request) {
        request->send(200, "application/json", getDiagnosticJson());
    });

    // API: –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    server.on("/api/detailed_diagnostics", HTTP_GET, [](AsyncWebServerRequest *request) {
        String diagnostics = get_detailed_diagnostics();
        request->send(200, "text/plain", diagnostics);
    });

    // ‚ùå VACTUAL API —É–¥–∞–ª—ë–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Motion Controller —Ä–µ–∂–∏–º

    // API: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫ –≤ –ê–º–ø–µ—Ä–∞—Ö (amps -> mA), –∫–∞–∫ –≤ PoC
    server.on("/api/set_current_amps", HTTP_POST, [](AsyncWebServerRequest *request) {
        JsonDocument doc;
        if (!tmc_initialized) {
            doc["success"] = false;
            doc["message"] = "TMC5160 not initialized";
            String response; serializeJson(doc, response);
            request->send(400, "application/json", response);
            return;
        }

        if (request->hasParam("amps", true)) {
            const float amps = request->getParam("amps", true)->value().toFloat();
            const uint16_t mA = (uint16_t)roundf(amps * 1000.0f);
            const float hold = currentSettings.hold_multiplier;

            set_motor_current(mA, hold);
            add_log("üîß Current set via API (amps): " + String(amps, 3) + "A");
            add_log_to_web("üîß Current set via API (amps): " + String(amps, 3) + "A");

            doc["success"] = true;
            doc["message"] = "Current updated";
            doc["current_mA"] = (int)mA;
            String response; serializeJson(doc, response);
            request->send(200, "application/json", response);
        } else {
            doc["success"] = false;
            doc["message"] = "Missing amps parameter";
            String response; serializeJson(doc, response);
            request->send(400, "application/json", response);
        }
    });

    // API: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
    server.on("/api/stop", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (tmc_initialized) {
            motor.stop();  // –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!
        }
        add_log("‚èπÔ∏è Movement stopped via API");
        add_log_to_web("‚èπÔ∏è Movement stopped via API");
        
        JsonDocument doc;
        doc["success"] = true;
        doc["message"] = "Movement stopped";
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
    server.on("/api/reset", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (tmc_initialized) {
            motor.setCurrentPosition(0);  // –ö–ê–ö –í –ü–†–ò–ú–ï–†–ï!
            motor.setTargetPosition(0);
        }
        add_log("üîÑ Position reset via API");
        add_log_to_web("üîÑ Position reset via API");
        
        JsonDocument doc;
        doc["success"] = true;
        doc["message"] = "Position reset to zero";
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –õ–æ–≥–∏
    server.on("/api/logs", HTTP_GET, [](AsyncWebServerRequest *request) {
        JsonDocument doc;
        doc["success"] = true;
        doc["data"] = system_logs;
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // API: –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
    server.on("/api/logs/clear", HTTP_POST, [](AsyncWebServerRequest *request) {
        system_logs = "";
        add_log("üßπ Logs cleared");
        add_log_to_web("üßπ Logs cleared");
        
        JsonDocument doc;
        doc["success"] = true;
        doc["message"] = "Logs cleared";
        
        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    // ‚ùå STEP/DIR —Ç–µ—Å—Ç —É–¥–∞–ª—ë–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Motion Controller (SPI) —Ä–µ–∂–∏–º

    // API: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ EEPROM
    server.on("/api/save_settings", HTTP_POST, [](AsyncWebServerRequest *request) {
        if (request->hasParam("current_mA", true) && request->hasParam("microsteps", true) &&
            request->hasParam("max_speed", true) && request->hasParam("acceleration", true) &&
            request->hasParam("deceleration", true)) {

            MotorSettings newSettings;
            newSettings.current_mA = request->getParam("current_mA", true)->value().toInt();
            newSettings.microsteps = request->getParam("microsteps", true)->value().toInt();
            newSettings.max_speed = request->getParam("max_speed", true)->value().toInt();
            newSettings.acceleration = request->getParam("acceleration", true)->value().toInt();
            newSettings.deceleration = request->getParam("deceleration", true)->value().toInt();
            
            // steps_per_rev –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 200 * microsteps
            if (request->hasParam("steps_per_rev", true)) {
                newSettings.steps_per_rev = request->getParam("steps_per_rev", true)->value().toInt();
            } else {
                newSettings.steps_per_rev = 200 * newSettings.microsteps;
            }
            
            // hold_multiplier –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            if (request->hasParam("hold_multiplier", true)) {
                newSettings.hold_multiplier = request->getParam("hold_multiplier", true)->value().toFloat();
            } else {
                newSettings.hold_multiplier = currentSettings.hold_multiplier;
            }
            
            // gear_ratio –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            if (request->hasParam("gear_ratio", true)) {
                newSettings.gear_ratio = request->getParam("gear_ratio", true)->value().toFloat();
            } else {
                newSettings.gear_ratio = currentSettings.gear_ratio;
            }
            
            // control_mode —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω (Motion Controller)
            newSettings.control_mode = MODE_MOTION_CONTROLLER;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!validate_current(newSettings.current_mA)) {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "Invalid current value";
                String response; serializeJson(doc, response);
                request->send(400, "application/json", response);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM
            if (saveMotorSettings(newSettings)) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                currentSettings = newSettings;
                
                add_log("üíæ Settings saved: I=" + String(newSettings.current_mA) + "mA, ¬µ=" + String(newSettings.microsteps) +
                        ", mode=" + String(newSettings.control_mode == MODE_MOTION_CONTROLLER ? "MC" : "SD"));
                add_log_to_web("üíæ Settings saved to EEPROM");

                JsonDocument doc;
                doc["success"] = true;
                doc["message"] = "Settings saved to EEPROM";

                String response;
                serializeJson(doc, response);
                request->send(200, "application/json", response);
            } else {
                JsonDocument doc;
                doc["success"] = false;
                doc["message"] = "Failed to save settings";

                String response;
                serializeJson(doc, response);
                request->send(500, "application/json", response);
            }
        } else {
            JsonDocument doc;
            doc["success"] = false;
            doc["message"] = "Missing required parameters";

            String response;
            serializeJson(doc, response);
            request->send(400, "application/json", response);
        }
    });

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ LittleFS
    server.serveStatic("/", LittleFS, "/");

    // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    server.onNotFound([](AsyncWebServerRequest *request) {
        request->send(404, "text/plain", "Not found");
    });

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.begin();
    add_log("‚úÖ ESPAsyncWebServer started with full API support");
    add_log_to_web("‚úÖ ESPAsyncWebServer started with full API support");
}

void handleClient() {
    // –° ESPAsyncWebServer —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ –≤ loop()
    // –°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}